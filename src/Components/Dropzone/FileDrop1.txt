import React, { useEffect, useRef, useState } from "react";
import Dropzone from "react-dropzone";
import "./magnifier.css"; // Ensure this file includes .img-magnifier-glass class

const Filedrop = ({
  onDrop,
  error,
  selectedFiles,
  headerText,
  description,
  icon,
  zoom = 2, // Default zoom level, can be adjusted as needed
}) => {
  const imgRef = useRef(null);
  const glassRef = useRef(null);
  const [isMagnifierVisible, setIsMagnifierVisible] = useState(false);

  useEffect(() => {
    const img = imgRef.current;
    let glass = glassRef.current;

    const createMagnifierGlass = () => {
      if (!glass) {
        glass = document.createElement("div");
        glass.setAttribute("class", "img-magnifier-glass");
        img.parentElement.insertBefore(glass, img);
        glassRef.current = glass;
      }

      glass.style.backgroundImage = `url('${img.src}')`;
      glass.style.backgroundRepeat = "no-repeat";
      glass.style.position = "100%";
      glass.style.backgroundSize = `${img.width * zoom}px ${
        img.height * zoom
      }px`;

      const bw = 1;
      const w = glass.offsetWidth / 2;
      const h = glass.offsetHeight / 2;

      const moveMagnifier = (e) => {
        e.preventDefault();
        const pos = getCursorPos(e);
        let x = pos.x;
        let y = pos.y;

        // Check if the cursor is within the bounds of the image
        if (
          x > img.width - w / zoom ||
          x < w / zoom ||
          y > img.height - h / zoom ||
          y < h / zoom
        ) {
          glass.style.display = "none";
          return;
        }

        if (x > img.width - w / zoom) x = img.width - w / zoom;
        if (x < w / zoom) x = w / zoom;
        if (y > img.height - h / zoom) y = img.height - h / zoom;
        if (y < h / zoom) y = h / zoom;

        glass.style.left = `${x - w}px`;
        glass.style.top = `${y - h}px`;
        glass.style.backgroundPosition = `-${x * zoom - w + bw}px -${
          y * zoom - h + bw
        }px`;
        glass.style.display = "block";
      };

      const getCursorPos = (e) => {
        const a = img.getBoundingClientRect();
        const x = e.pageX - a.left - window.pageXOffset;
        const y = e.pageY - a.top - window.pageYOffset;
        return { x, y };
      };

      img.addEventListener("mousemove", moveMagnifier);
      img.addEventListener("touchmove", moveMagnifier);
      glass.addEventListener("mousemove", moveMagnifier);
      glass.addEventListener("touchmove", moveMagnifier);

      return () => {
        img.removeEventListener("mousemove", moveMagnifier);
        img.removeEventListener("touchmove", moveMagnifier);
        glass.removeEventListener("mousemove", moveMagnifier);
        glass.removeEventListener("touchmove", moveMagnifier);
      };
    };

    if (isMagnifierVisible && img) {
      const removeEventListeners = createMagnifierGlass();
      return () => removeEventListeners();
    } else if (glass) {
      glass.style.display = "none";
    }
  }, [isMagnifierVisible, zoom]);

  return (
    <div className="flex-grow basis-48 rounded-md border-[2px] border-dashed pb-8 cursor-pointer">
      <Dropzone onDrop={onDrop} multiple={false}>
        {({ getRootProps, getInputProps }) => (
          <section>
            <div
              {...getRootProps({
                className: "dropzone",
              })}
            >
              <input {...getInputProps()} />
              {error && (
                <div className="text-[13px] font-semibold text-center text-red-400">
                  <p>**{error}**</p>
                </div>
              )}
              {selectedFiles ? (
                <div className="w-full flex justify-center items-center mt-2 overflow-auto">
                  <img
                    id="magnifier-target"
                    ref={imgRef}
                    className="relative object-cover max-h-[350px] overflow-hidden"
                    src={URL.createObjectURL(selectedFiles)}
                    alt={`Selected file preview`}
                    onMouseEnter={() => setIsMagnifierVisible(true)}
                    onMouseLeave={() => setIsMagnifierVisible(false)}
                  />
                </div>
              ) : (
                <div className="text-7xl text-center flex justify-center py-4">
                  {icon}
                </div>
              )}
              <h3 className="satoshi-500 mt-2 text-[12px] text-center md:text-[14px] xl:text-[16px]">
                {headerText}{" "}
                <span className="text-blue-700 satoshi-500">browse</span>
              </h3>
              <p className="text-[--gray] text-[14px] text-center">
                {description}
              </p>
            </div>
          </section>
        )}
      </Dropzone>
    </div>
  );
};

export default Filedrop;
